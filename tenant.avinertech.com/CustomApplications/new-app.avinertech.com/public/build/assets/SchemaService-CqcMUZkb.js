import{l as s}from"./app-Ccdyq44E.js";class d{static async getTenantConfig(n){var t,e;try{return(await s.get("/api/configuration/database")).data}catch(a){throw new Error(((e=(t=a.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to fetch tenant configuration")}}static async testConnection(n){var t,e;try{return(await s.post("/api/configuration/test-connection",n)).data}catch(a){throw new Error(((e=(t=a.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to test database connection")}}static async storeSchema(n){var t,e;try{return(await s.post("/api/schema/",{schemas:n})).data}catch(a){throw new Error(((e=(t=a.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to store schema")}}generateMySQLQueries(n){const t=[],e=this.generateCreateTableQuery(n);t.push(e);const a=this.generateIndexQueries(n);return t.push(...a),t}generateCreateTableQuery(n){const t=n.fields.map(e=>{let a=`\`${e.name}\` ${this.mapFieldTypeToMySQL(e.type)}`;return a+=e.nullable?" NULL":" NOT NULL",e.unique&&(a+=" UNIQUE"),a});return n.fields.find(e=>e.name==="created_at")||t.push("`created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP"),n.fields.find(e=>e.name==="updated_at")||t.push("`updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),`CREATE TABLE IF NOT EXISTS \`${n.name}\` (
            ${t.join(`,
            `)}
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;`}generateIndexQueries(n){const t=[],e=n.fields.filter(a=>a.indexed);if(e.length>0){const a=`idx_${n.name}_${e.map(r=>r.name).join("_")}`,i=e.map(r=>`\`${r.name}\``).join(", ");t.push(`CREATE INDEX \`${a}\` ON \`${n.name}\` (${i});`)}return t}mapFieldTypeToMySQL(n){return{string:"VARCHAR(255)",integer:"INT",float:"FLOAT",boolean:"BOOLEAN",datetime:"DATETIME",date:"DATE",time:"TIME",timestamp:"TIMESTAMP",text:"TEXT",longText:"LONGTEXT",mediumText:"MEDIUMTEXT",char:"CHAR(255)",decimal:"DECIMAL(10,2)",double:"DOUBLE",bigInteger:"BIGINT",unsignedInteger:"INT UNSIGNED",unsignedBigInteger:"BIGINT UNSIGNED",json:"JSON",jsonb:"JSON",binary:"BLOB",uuid:"CHAR(36)",ipAddress:"VARCHAR(45)",macAddress:"VARCHAR(17)"}[n]||"VARCHAR(255)"}}export{d as S};
