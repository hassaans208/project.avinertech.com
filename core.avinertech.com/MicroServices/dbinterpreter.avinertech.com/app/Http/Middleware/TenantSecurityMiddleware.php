<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use App\Services\TenantSecurityService;

class TenantSecurityMiddleware
{
    private const DENY_LIST = [
        'DROP DATABASE', 'DROP TABLE', 'DROP USER', 'DROP VIEW', 
        'DROP TRIGGER', 'DROP EVENT', 'DROP FUNCTION', 'DROP PROCEDURE',
        'GRANT', 'REVOKE', 'CREATE USER', 'ALTER DATABASE', 
        'KILL', 'SHUTDOWN', 'FLUSH', 'RESET'
    ];

    private const ALLOW_LIST = [
        'CREATE TABLE', 'ALTER TABLE', 'CREATE VIEW', 'ALTER VIEW',
        'CREATE TRIGGER', 'ALTER TRIGGER', 'CREATE PROCEDURE', 'ALTER PROCEDURE',
        'CREATE FUNCTION', 'ALTER FUNCTION', 'CREATE EVENT', 'ALTER EVENT',
        'CREATE INDEX', 'DROP INDEX', 'INSERT', 'UPDATE', 'DELETE', 'SELECT'
    ];

    public function __construct(
        private TenantSecurityService $securityService
    ) {}

    public function handle(Request $request, Closure $next)
    {
        // Only apply to database API routes
        if (!$request->is('api/v1/database/*')) {
            return $next($request);
        }

        // Skip for preview-only endpoints
        if ($request->is('api/v1/database/preview-sql')) {
            return $next($request);
        }

        // Get tenant from request (set by SignatureVerificationMiddleware)
        $tenantId = $request->get('tenant_id');
        
        if (!$tenantId) {
            return response()->json([
                'status' => 'error',
                'message' => __('messages.tenant_required'),
                'error' => [
                    'code' => 'TENANT_REQUIRED',
                    'details' => 'Tenant information is required'
                ]
            ], 401);
        }

        // Extract SQL from request (generated by SqlGeneratorService)
        $sql = $request->input('generated_sql') ?? $request->input('sql');
        
        if ($sql) {
            $this->validateSql($sql, $request, $tenantId);
        }

        return $next($request);
    }

    private function validateSql(string $sql, Request $request, string $tenantId): void
    {
        $sqlUpper = strtoupper(trim($sql));
        
        // Check deny list
        foreach (self::DENY_LIST as $denied) {
            if (strpos($sqlUpper, $denied) !== false) {
                // Log denied query
                $this->securityService->logDeniedQuery(
                    $tenantId,
                    $request->input('type', 'unknown'),
                    $sql,
                    "Blocked dangerous operation: {$denied}",
                    $request
                );
                
                Log::warning('Blocked dangerous SQL', [
                    'sql' => $sql,
                    'tenant_id' => $tenantId,
                    'ip' => $request->ip(),
                    'user_agent' => $request->userAgent()
                ]);
                
                abort(403, 'OPERATION_NOT_PERMITTED: ' . $denied . ' operations are not allowed');
            }
        }

        // Validate against allow list for DDL operations
        if ($this->isDdlOperation($sqlUpper)) {
            $allowed = false;
            foreach (self::ALLOW_LIST as $allowedOp) {
                if (strpos($sqlUpper, $allowedOp) !== false) {
                    $allowed = true;
                    break;
                }
            }
            
            if (!$allowed) {
                // Log denied query
                $this->securityService->logDeniedQuery(
                    $tenantId,
                    $request->input('type', 'unknown'),
                    $sql,
                    'DDL operation not in allow list',
                    $request
                );
                
                Log::warning('Blocked non-whitelisted DDL', [
                    'sql' => $sql,
                    'tenant_id' => $tenantId
                ]);
                
                abort(403, 'OPERATION_NOT_PERMITTED: DDL operation not in allow list');
            }
        }
    }

    private function isDdlOperation(string $sql): bool
    {
        $ddlKeywords = ['CREATE', 'ALTER', 'DROP', 'TRUNCATE'];
        foreach ($ddlKeywords as $keyword) {
            if (strpos($sql, $keyword) === 0) {
                return true;
            }
        }
        return false;
    }
}
