{
	"info": {
		"_postman_id": "db-interpreter-api-collection",
		"name": "Database API - dbinterpreter.avinertech.com",
		"description": "Comprehensive collection for testing the Database API microservice with tenant-based operations, batch processing, admin approval workflows, and view management system. UPDATED: Now includes enhanced view management APIs with configurable view types (list, create/update, analytics, soft-delete), metadata APIs, and hybrid view rendering with caching support.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "db-interpreter-api"
	},
	"item": [
		{
			"name": "Authentication & Setup",
			"item": [
				{
					"name": "Set Environment Variables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set your signature here - this should be obtained from signal.avinertech.com",
									"pm.environment.set('X_APP_SIGNATURE', 'your_signature_here');",
									"",
									"// Set base URL",
									"pm.environment.set('BASE_URL', 'http://127.0.0.1:8000');",
									"",
									"// NOTE: tenant_id and schema_name are now extracted from verified signatures",
									"// Do NOT include these in request bodies - they will be blocked by security middleware",
									"",
									"// Set table name for testing (schema comes from signature)",
									"pm.environment.set('TABLE_NAME', 'users');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/capabilities",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"capabilities"
							]
						},
						"description": "Use this request to set up environment variables. Update the X_APP_SIGNATURE with your actual signature from signal.avinertech.com"
					},
					"response": []
				}
			],
			"description": "Setup requests for authentication and environment configuration"
		},
		{
			"name": "Security Tests",
			"item": [
				{
					"name": "Test Security Violation - tenant_id Parameter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tenant_id\": \"malicious-tenant-id\",\n    \"name\": \"test_table\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"type\": \"INT\",\n            \"primary_key\": true,\n            \"auto_increment\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables"
							]
						},
						"description": "Test security violation - should return 403 Forbidden for including tenant_id parameter"
					},
					"response": []
				},
				{
					"name": "Test Security Violation - schema_name Parameter",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"schema_name\": \"malicious-schema\",\n    \"name\": \"test_table\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"type\": \"INT\",\n            \"primary_key\": true,\n            \"auto_increment\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables"
							]
						},
						"description": "Test security violation - should return 403 Forbidden for including schema_name parameter"
					},
					"response": []
				},
				{
					"name": "Test Security Violation - Both Parameters",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"tenant_id\": \"malicious-tenant-id\",\n    \"schema_name\": \"malicious-schema\",\n    \"name\": \"test_table\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"type\": \"INT\",\n            \"primary_key\": true,\n            \"auto_increment\": true\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables"
							]
						},
						"description": "Test security violation - should return 403 Forbidden for including both prohibited parameters"
					},
					"response": []
				}
			],
			"description": "Security tests to verify that prohibited parameters are blocked"
		},
		{
			"name": "Database Capabilities",
			"item": [
				{
					"name": "Get Database Capabilities",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/capabilities",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"capabilities"
							]
						},
						"description": "Get MySQL server capabilities and version information"
					},
					"response": []
				}
			],
			"description": "Database capability and version detection endpoints"
		},
		{
			"name": "Metadata APIs",
			"item": [
				{
					"name": "Get Filter Operators",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/metadata/filters",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"metadata",
								"filters"
							]
						},
						"description": "Get all supported filter operators (equals, not equals, greater than, etc.)"
					},
					"response": []
				},
				{
					"name": "Get Aggregation Functions",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/metadata/aggregations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"metadata",
								"aggregations"
							]
						},
						"description": "Get all supported aggregation functions (COUNT, SUM, AVG, MIN, MAX, etc.)"
					},
					"response": []
				},
				{
					"name": "Get All Tenant Columns",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/metadata/columns",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"metadata",
								"columns"
							]
						},
						"description": "Get all columns from all tables belonging to the tenant"
					},
					"response": []
				}
			],
			"description": "Metadata endpoints for filters, aggregations, and column information"
		},
		{
			"name": "Raw Query API",
			"item": [
				{
					"name": "Execute Safe Raw Query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"SELECT * FROM users WHERE id > 1 LIMIT 10\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/raw-query",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"raw-query"
							]
						},
						"description": "Execute a safe, validated SELECT query. Only SELECT queries are allowed with strict validation."
					},
					"response": []
				},
				{
					"name": "Execute Raw Query with Aggregation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"SELECT COUNT(*) as total_users, AVG(age) as avg_age FROM users WHERE created_at > '2024-01-01'\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/raw-query",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"raw-query"
							]
						},
						"description": "Execute a raw query with aggregation functions"
					},
					"response": []
				},
				{
					"name": "Test Prohibited Query (Should Fail)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"DROP TABLE users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/raw-query",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"raw-query"
							]
						},
						"description": "Test a prohibited query - this should fail with validation error"
					},
					"response": []
				}
			],
			"description": "Raw query execution with strict validation"
		},
		{
			"name": "SQL Preview",
			"item": [
				{
					"name": "Preview SQL Query",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"sql\": \"SELECT * FROM users WHERE id = 1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/preview-sql",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"preview-sql"
							]
						},
						"description": "Preview SQL query without executing it"
					},
					"response": []
				}
			],
			"description": "SQL preview and validation endpoints"
		},
		{
			"name": "Schema Management",
			"item": [
				{
					"name": "Get All Schemas",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/schemas",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"schemas"
							]
						},
						"description": "Get all available schemas for the tenant"
					},
					"response": []
				},
				{
					"name": "Get Schema Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/schema",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"schema"
							]
						},
						"description": "Get details of a specific schema"
					},
					"response": []
				}
			],
			"description": "Schema management endpoints"
		},
		{
			"name": "Table Management (Batch Operations)",
			"item": [
				{
					"name": "Get All Tables in Schema",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables"
							]
						},
						"description": "Get all tables in a specific schema"
					},
					"response": []
				},
				{
					"name": "Get Table Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}"
							]
						},
						"description": "Get details of a specific table"
					},
					"response": []
				},
				{
					"name": "Create Table (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "create-table-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"users\",\n    \"columns\": [\n        {\n            \"name\": \"id\",\n            \"type\": \"BIGINT\",\n            \"auto_increment\": true,\n            \"primary_key\": true\n        },\n        {\n            \"name\": \"name\",\n            \"type\": \"VARCHAR(255)\",\n            \"nullable\": false\n        },\n        {\n            \"name\": \"email\",\n            \"type\": \"VARCHAR(255)\",\n            \"nullable\": false,\n            \"unique\": true\n        },\n        {\n            \"name\": \"created_at\",\n            \"type\": \"TIMESTAMP\",\n            \"default\": \"CURRENT_TIMESTAMP\"\n        },\n        {\n            \"name\": \"updated_at\",\n            \"type\": \"TIMESTAMP\",\n            \"default\": \"CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\"\n        }\n    ],\n    \"case_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables"
							]
						},
						"description": "Create a new table (batch operation - requires admin approval)"
					},
					"response": []
				},
				{
					"name": "Update Table (Batch)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "update-table-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"engine\": \"InnoDB\",\n    \"charset\": \"utf8mb4\",\n    \"case_id\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}"
							]
						},
						"description": "Update table properties (batch operation - requires admin approval)"
					},
					"response": []
				},
				{
					"name": "Add Column to Table (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "add-column-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"column\": {\n        \"name\": \"phone\",\n        \"type\": \"VARCHAR(20)\",\n        \"nullable\": true,\n        \"default\": null\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/columns",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"columns"
							]
						},
						"description": "Add a new column to an existing table (batch operation)"
					},
					"response": []
				},
				{
					"name": "Update Column (Batch)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "update-column-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"column\": {\n        \"type\": \"VARCHAR(50)\",\n        \"nullable\": false,\n        \"default\": \"\"\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/columns/phone",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"columns",
								"phone"
							]
						},
						"description": "Update an existing column (batch operation)"
					},
					"response": []
				},
				{
					"name": "Delete Column (Batch)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "delete-column-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/columns/phone",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"columns",
								"phone"
							]
						},
						"description": "Delete a column from a table (batch operation)"
					},
					"response": []
				},
				{
					"name": "Add Index to Table (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "add-index-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"index\": {\n        \"name\": \"idx_users_email\",\n        \"type\": \"UNIQUE\",\n        \"columns\": [\"email\"]\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/indexes",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"indexes"
							]
						},
						"description": "Add an index to a table (batch operation)"
					},
					"response": []
				},
				{
					"name": "Update Index (Batch)",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "update-index-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"index\": {\n        \"type\": \"INDEX\",\n        \"columns\": [\"email\", \"name\"]\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/indexes/idx_users_email",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"indexes",
								"idx_users_email"
							]
						},
						"description": "Update an existing index (batch operation)"
					},
					"response": []
				},
				{
					"name": "Delete Index (Batch)",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "delete-index-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/indexes/idx_users_email",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"indexes",
								"idx_users_email"
							]
						},
						"description": "Delete an index from a table (batch operation)"
					},
					"response": []
				},
				{
					"name": "Add Foreign Key (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "add-fk-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"foreign_key\": {\n        \"name\": \"fk_users_role_id\",\n        \"column\": \"role_id\",\n        \"referenced_table\": \"roles\",\n        \"referenced_column\": \"id\",\n        \"on_delete\": \"CASCADE\",\n        \"on_update\": \"CASCADE\"\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/foreign-keys",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"foreign-keys"
							]
						},
						"description": "Add a foreign key constraint (batch operation)"
					},
					"response": []
				},
				{
					"name": "Add Check Constraint (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "add-check-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"check\": {\n        \"name\": \"chk_users_age\",\n        \"expression\": \"age >= 18 AND age <= 120\"\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/checks",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"checks"
							]
						},
						"description": "Add a check constraint (batch operation)"
					},
					"response": []
				},
				{
					"name": "Enable Partitioning (Batch)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "enable-partitioning-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"partitioning\": {\n        \"type\": \"RANGE\",\n        \"column\": \"created_at\",\n        \"partitions\": [\n            {\n                \"name\": \"p_2024\",\n                \"value\": \"2025-01-01\"\n            },\n            {\n                \"name\": \"p_2025\",\n                \"value\": \"2026-01-01\"\n            }\n        ]\n    },\n    \"case_id\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/partitions",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"partitions"
							]
						},
						"description": "Enable table partitioning (batch operation)"
					},
					"response": []
				}
			],
			"description": "Table management operations that require batch processing and admin approval"
		},
		{
			"name": "Data Operations (Instant)",
			"item": [
				{
					"name": "Get Table Data",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/data?limit=10&offset=0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"data"
							],
							"query": [
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "offset",
									"value": "0"
								}
							]
						},
						"description": "Get data from a table (instant operation)"
					},
					"response": []
				},
				{
					"name": "Get Table Data with Filters",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/data?filters[0][column]=name&filters[0][operator]=like&filters[0][value]=%John%&limit=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"data"
							],
							"query": [
								{
									"key": "filters[0][column]",
									"value": "name"
								},
								{
									"key": "filters[0][operator]",
									"value": "like"
								},
								{
									"key": "filters[0][value]",
									"value": "%John%"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get data from a table with filters (instant operation)"
					},
					"response": []
				},
				{
					"name": "Insert Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "insert-data-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"phone\": \"+1234567890\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/data",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"data"
							]
						},
						"description": "Insert new data into a table (instant operation)"
					},
					"response": []
				},
				{
					"name": "Update Data",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"name\": \"Jane Doe\",\n        \"phone\": \"+0987654321\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/data/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"data",
								"1"
							]
						},
						"description": "Update existing data in a table (instant operation)"
					},
					"response": []
				},
				{
					"name": "Soft Delete Data",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/data/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"data",
								"1"
							]
						},
						"description": "Soft delete data from a table (instant operation)"
					},
					"response": []
				}
			],
			"description": "Instant data operations (CRUD) that execute immediately"
		},
		{
			"name": "Soft Delete Management",
			"item": [
				{
					"name": "Get Soft Deleted Records",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/soft-deleted",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"soft-deleted"
							]
						},
						"description": "Get all soft-deleted records from a table"
					},
					"response": []
				},
				{
					"name": "Recover Soft Deleted Record",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "recover-record-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/soft-deleted/1/recover",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"soft-deleted",
								"1",
								"recover"
							]
						},
						"description": "Recover a soft-deleted record"
					},
					"response": []
				},
				{
					"name": "Permanently Delete Record",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tables/{{TABLE_NAME}}/soft-deleted/1/permanent",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tables",
								"{{TABLE_NAME}}",
								"soft-deleted",
								"1",
								"permanent"
							]
						},
						"description": "Permanently delete a soft-deleted record"
					},
					"response": []
				}
			],
			"description": "Soft delete management operations"
		},
		{
			"name": "Operation Management",
			"item": [
				{
					"name": "Create Operation",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Idempotency-Key",
								"value": "create-operation-{{$timestamp}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"CREATE_TABLE\",\n    \"table_name\": \"products\",\n    \"case_id\": 1,\n    \"payload\": {\n        \"columns\": [\n            {\n                \"name\": \"id\",\n                \"type\": \"BIGINT\",\n                \"auto_increment\": true,\n                \"primary_key\": true\n            },\n            {\n                \"name\": \"name\",\n                \"type\": \"VARCHAR(255)\",\n                \"nullable\": false\n            },\n            {\n                \"name\": \"price\",\n                \"type\": \"DECIMAL(10,2)\",\n                \"nullable\": false\n            }\n        ]\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operations"
							]
						},
						"description": "Create a new operation (will be queued for batch processing)"
					},
					"response": []
				},
				{
					"name": "Get All Operations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operations?status=queued&limit=10",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operations"
							],
							"query": [
								{
									"key": "status",
									"value": "queued"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get all operations with optional filtering"
					},
					"response": []
				},
				{
					"name": "Get Operation Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operations/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operations",
								"1"
							]
						},
						"description": "Get details of a specific operation"
					},
					"response": []
				}
			],
			"description": "Operation management endpoints"
		},
		{
			"name": "Batch Management",
			"item": [
				{
					"name": "Get All Operation Groups",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups?status=pending_approval",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups"
							],
							"query": [
								{
									"key": "status",
									"value": "pending_approval"
								}
							]
						},
						"description": "Get all operation groups (batches)"
					},
					"response": []
				},
				{
					"name": "Get Operation Group Details",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups",
								"1"
							]
						},
						"description": "Get details of a specific operation group"
					},
					"response": []
				},
				{
					"name": "Request Batch Approval",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"Creating new products table with basic structure\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups/1/request-approval",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups",
								"1",
								"request-approval"
							]
						},
						"description": "Request admin approval for a batch of operations"
					},
					"response": []
				}
			],
			"description": "Batch management and approval workflow"
		},
		{
			"name": "View Management",
			"item": [
				{
					"name": "Get All View Definitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has view definitions', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views?table_name={{TABLE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views"
							],
							"query": [
								{
									"key": "table_name",
									"value": "{{TABLE_NAME}}"
								}
							]
						}
					}
				},
				{
					"name": "Create View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('View definition created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    ",
									"    // Store view ID for other requests",
									"    pm.environment.set('VIEW_ID', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_name\": \"user_management\",\n  \"view_type\": \"list\",\n  \"title\": \"User Management\",\n  \"description\": \"Manage system users\",\n  \"rendering_mode\": \"hybrid\",\n  \"column_configurations\": [\n    {\n      \"column_name\": \"id\",\n      \"display_name\": \"ID\",\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"display_order\": 1,\n      \"data_type\": \"BIGINT\",\n      \"validation_rules\": {}\n    },\n    {\n      \"column_name\": \"email\",\n      \"display_name\": \"Email Address\",\n      \"is_visible\": true,\n      \"is_editable\": true,\n      \"is_required\": true,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"display_order\": 2,\n      \"data_type\": \"VARCHAR\",\n      \"validation_rules\": {\n        \"required\": true,\n        \"email\": true,\n        \"max\": 255\n      },\n      \"placeholder_text\": \"Enter email address\"\n    },\n    {\n      \"column_name\": \"password\",\n      \"display_name\": \"Password\",\n      \"is_visible\": true,\n      \"is_editable\": true,\n      \"is_required\": true,\n      \"is_searchable\": false,\n      \"is_sortable\": false,\n      \"display_order\": 3,\n      \"data_type\": \"PASSWORD\",\n      \"is_password_field\": true,\n      \"validation_rules\": {\n        \"required\": true,\n        \"min\": 8\n      },\n      \"placeholder_text\": \"Enter password\"\n    }\n  ],\n  \"layout_configuration\": {\n    \"layout_type\": \"table\",\n    \"layout_config\": {\n      \"columns_per_row\": 3,\n      \"show_actions\": true,\n      \"pagination\": {\n        \"per_page\": 25,\n        \"show_page_info\": true\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views"
							]
						}
					}
				},
				{
					"name": "Get Specific View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View definition retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}"
							]
						}
					}
				},
				{
					"name": "Update View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View definition updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated User Management\",\n  \"description\": \"Updated description\",\n  \"rendering_mode\": \"cached\",\n  \"is_active\": true\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}"
							]
						}
					}
				},
				{
					"name": "Render View (Hybrid)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View rendered successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('html_content');",
									"    pm.expect(jsonData.data).to.have.property('css_content');",
									"    pm.expect(jsonData.data).to.have.property('js_content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_type\": \"list\",\n  \"rendering_mode\": \"hybrid\",\n  \"force_refresh\": false\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/render",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"render"
							]
						}
					}
				},
				{
					"name": "Build and Cache View",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View built successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('cache_key');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"force_rebuild\": false,\n  \"cache_duration\": 3600\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}/build",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}",
								"build"
							]
						}
					}
				},
				{
					"name": "Get Cached View",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Cached view retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('html_content');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}/cached",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}",
								"cached"
							]
						}
					}
				},
				{
					"name": "Update Column Configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Column configuration updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"display_name\": \"User ID\",\n  \"is_visible\": true,\n  \"is_editable\": false,\n  \"is_required\": false,\n  \"is_searchable\": true,\n  \"is_sortable\": true,\n  \"display_order\": 1,\n  \"validation_rules\": {\n    \"required\": false\n  },\n  \"placeholder_text\": \"Enter user ID\",\n  \"help_text\": \"Unique identifier for the user\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}/columns/id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}",
								"columns",
								"id"
							]
						}
					}
				},
				{
					"name": "Reorder Columns",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Columns reordered', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"column_orders\": [\n    {\n      \"column_name\": \"id\",\n      \"display_order\": 1\n    },\n    {\n      \"column_name\": \"email\",\n      \"display_order\": 2\n    },\n    {\n      \"column_name\": \"password\",\n      \"display_order\": 3\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}/columns/reorder",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}",
								"columns",
								"reorder"
							]
						}
					}
				},
				{
					"name": "Get Schema Analysis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Schema analysis retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('columns');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/tables/{{TABLE_NAME}}/schema",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"tables",
								"{{TABLE_NAME}}",
								"schema"
							]
						}
					}
				},
				{
					"name": "Build All Views for Table",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('All views built', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"view_types\": [\"create\", \"update\", \"list\", \"analytics\"],\n  \"force_rebuild\": false,\n  \"cache_duration\": 3600\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/tables/{{TABLE_NAME}}/build-all",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"tables",
								"{{TABLE_NAME}}",
								"build-all"
							]
						}
					}
				},
				{
					"name": "Delete View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View definition deleted', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/views/{{VIEW_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"views",
								"{{VIEW_ID}}"
							]
						}
					}
				}
			]
		},
		{
			"name": "View Metadata",
			"item": [
				{
					"name": "Get All Data Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Data types retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/data-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"data-types"
							]
						}
					}
				},
				{
					"name": "Get Data Types by Category",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Data type categories retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('text');",
									"    pm.expect(jsonData.data).to.have.property('numeric');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/data-types/categories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"data-types",
								"categories"
							]
						}
					}
				},
				{
					"name": "Get Form Controls",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Form controls retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('text');",
									"    pm.expect(jsonData.data).to.have.property('password');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/form-controls",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"form-controls"
							]
						}
					}
				},
				{
					"name": "Get Validation Rules",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Validation rules retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('required');",
									"    pm.expect(jsonData.data).to.have.property('min');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/validation-rules",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"validation-rules"
							]
						}
					}
				},
				{
					"name": "Get View Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View types retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('create');",
									"    pm.expect(jsonData.data).to.have.property('list');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/view-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"view-types"
							]
						}
					}
				},
				{
					"name": "Get Layout Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for view metadata",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Layout types retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('form');",
									"    pm.expect(jsonData.data).to.have.property('table');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/view-metadata/layout-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"view-metadata",
								"layout-types"
							]
						}
					}
				}
			]
		},
		{
			"name": "Enhanced View Management",
			"item": [
				{
					"name": "Get All View Types",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('View types retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"    ",
									"    // Check for expected view types",
									"    const viewTypeNames = jsonData.data.map(vt => vt.name);",
									"    pm.expect(viewTypeNames).to.include('list');",
									"    pm.expect(viewTypeNames).to.include('create/update');",
									"    pm.expect(viewTypeNames).to.include('analytics');",
									"    pm.expect(viewTypeNames).to.include('soft-delete');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/view-types",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"view-types"
							]
						}
					}
				},
				{
					"name": "Get Table Schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Table schema retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/table-schema?schema_name=test_schema&table_name={{TABLE_NAME}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"table-schema"
							],
							"query": [
								{
									"key": "schema_name",
									"value": "test_schema"
								},
								{
									"key": "table_name",
									"value": "{{TABLE_NAME}}"
								}
							]
						}
					}
				},
				{
					"name": "Generate Default Configurations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Default configurations generated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"schema_name\": \"test_schema\",\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_type\": \"list\"\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/generate-configurations",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"generate-configurations"
							]
						}
					}
				},
				{
					"name": "Validate Configuration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Configuration validated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"view_type\": \"list\",\n  \"view_configuration\": {\n    \"pagination\": true,\n    \"page_size\": 25,\n    \"show_search\": true\n  },\n  \"columns\": [\n    {\n      \"column_name\": \"id\",\n      \"display_name\": \"ID\",\n      \"column_options\": {\n        \"hide\": false,\n        \"sortable\": true,\n        \"searchable\": true,\n        \"column_width\": \"100px\"\n      }\n    },\n    {\n      \"column_name\": \"email\",\n      \"display_name\": \"Email\",\n      \"column_options\": {\n        \"sortable\": true,\n        \"searchable\": true,\n        \"filterable\": true\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/validate-configuration",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"validate-configuration"
							]
						}
					}
				},
				{
					"name": "Create Enhanced View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Enhanced view definition created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('view_type');",
									"    pm.expect(jsonData.data).to.have.property('view_configuration');",
									"    pm.expect(jsonData.data).to.have.property('columns');",
									"    ",
									"    // Store view ID for other requests",
									"    pm.environment.set('ENHANCED_VIEW_ID', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": \"tenant_123\",\n  \"schema_name\": \"test_schema\",\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_name\": \"enhanced_user_list\",\n  \"view_type\": \"list\",\n  \"title\": \"Enhanced User List\",\n  \"description\": \"Enhanced list view for users with advanced options\",\n  \"view_configuration\": {\n    \"pagination\": true,\n    \"page_size\": 25,\n    \"show_search\": true,\n    \"show_filters\": true,\n    \"export_enabled\": true\n  },\n  \"columns\": [\n    {\n      \"column_name\": \"id\",\n      \"display_name\": \"ID\",\n      \"data_type\": \"BIGINT\",\n      \"display_order\": 1,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"hide\": false,\n        \"sortable\": true,\n        \"searchable\": true,\n        \"exportable\": true,\n        \"column_width\": \"100px\"\n      }\n    },\n    {\n      \"column_name\": \"email\",\n      \"display_name\": \"Email Address\",\n      \"data_type\": \"VARCHAR\",\n      \"display_order\": 2,\n      \"is_visible\": true,\n      \"is_editable\": true,\n      \"is_required\": true,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"is_password_field\": false,\n      \"validation_rules\": {\n        \"required\": true,\n        \"email\": true,\n        \"max\": 255\n      },\n      \"placeholder_text\": \"Enter email address\",\n      \"help_text\": \"Valid email address required\",\n      \"column_options\": {\n        \"hide\": false,\n        \"sortable\": true,\n        \"searchable\": true,\n        \"filterable\": true,\n        \"exportable\": true,\n        \"column_width\": \"200px\"\n      }\n    },\n    {\n      \"column_name\": \"password\",\n      \"display_name\": \"Password\",\n      \"data_type\": \"VARCHAR\",\n      \"display_order\": 3,\n      \"is_visible\": true,\n      \"is_editable\": true,\n      \"is_required\": true,\n      \"is_searchable\": false,\n      \"is_sortable\": false,\n      \"is_password_field\": true,\n      \"validation_rules\": {\n        \"required\": true,\n        \"min\": 8\n      },\n      \"placeholder_text\": \"Enter password\",\n      \"help_text\": \"Minimum 8 characters\",\n      \"column_options\": {\n        \"hide\": false,\n        \"password\": true,\n        \"show_encrypted\": false,\n        \"exportable\": false\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								""
							]
						}
					}
				},
				{
					"name": "Get Enhanced View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Enhanced view definition retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('id');",
									"    pm.expect(jsonData.data).to.have.property('view_type');",
									"    pm.expect(jsonData.data).to.have.property('view_configuration');",
									"    pm.expect(jsonData.data).to.have.property('columns');",
									"    pm.expect(jsonData.data).to.have.property('view_type_definition');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/{{ENHANCED_VIEW_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"{{ENHANCED_VIEW_ID}}"
							]
						}
					}
				},
				{
					"name": "Update Enhanced View Definition",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Enhanced view definition updated', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Updated Enhanced User List\",\n  \"description\": \"Updated enhanced list view for users\",\n  \"view_configuration\": {\n    \"pagination\": true,\n    \"page_size\": 50,\n    \"show_search\": true,\n    \"show_filters\": true,\n    \"export_enabled\": true\n  }\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/{{ENHANCED_VIEW_ID}}",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								"{{ENHANCED_VIEW_ID}}"
							]
						}
					}
				},
				{
					"name": "Get Enhanced View Definitions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Enhanced view definitions retrieved', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/?tenant_id=tenant_123&schema_name=test_schema&table_name={{TABLE_NAME}}&view_type=list",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								""
							],
							"query": [
								{
									"key": "tenant_id",
									"value": "tenant_123"
								},
								{
									"key": "schema_name",
									"value": "test_schema"
								},
								{
									"key": "table_name",
									"value": "{{TABLE_NAME}}"
								},
								{
									"key": "view_type",
									"value": "list"
								}
							]
						}
					}
				},
				{
					"name": "Create Analytics View",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Analytics view created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('view_type', 'analytics');",
									"    ",
									"    // Store analytics view ID",
									"    pm.environment.set('ANALYTICS_VIEW_ID', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": \"tenant_123\",\n  \"schema_name\": \"test_schema\",\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_name\": \"user_analytics\",\n  \"view_type\": \"analytics\",\n  \"title\": \"User Analytics Dashboard\",\n  \"description\": \"Analytics dashboard for user data\",\n  \"view_configuration\": {\n    \"auto_refresh\": true,\n    \"refresh_interval\": 300,\n    \"chart_types\": [\"bar\", \"line\", \"pie\"],\n    \"time_range_options\": [\"7d\", \"30d\", \"90d\", \"1y\"]\n  },\n  \"columns\": [\n    {\n      \"column_name\": \"created_at\",\n      \"display_name\": \"Registration Date\",\n      \"data_type\": \"TIMESTAMP\",\n      \"display_order\": 1,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": false,\n      \"is_sortable\": false,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"chart_type\": \"line\",\n        \"aggregation_type\": \"count\",\n        \"group_by\": \"created_at\",\n        \"time_range\": \"30d\",\n        \"show_trends\": true,\n        \"drill_down\": true\n      }\n    },\n    {\n      \"column_name\": \"id\",\n      \"display_name\": \"User Count\",\n      \"data_type\": \"BIGINT\",\n      \"display_order\": 2,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": false,\n      \"is_sortable\": false,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"chart_type\": \"bar\",\n        \"aggregation_type\": \"count\",\n        \"group_by\": \"created_at\",\n        \"time_range\": \"30d\",\n        \"compare_period\": true,\n        \"drill_down\": true\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								""
							]
						}
					}
				},
				{
					"name": "Create Soft Delete View",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Set headers for enhanced view management",
									"pm.request.headers.add({",
									"    key: 'X-App-Signature',",
									"    value: pm.environment.get('X_APP_SIGNATURE')",
									"});",
									"",
									"// Set tenant and schema from signature",
									"pm.request.headers.add({",
									"    key: 'X-Tenant-ID',",
									"    value: 'tenant_123'",
									"});",
									"pm.request.headers.add({",
									"    key: 'X-Schema-Name',",
									"    value: 'test_schema'",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Soft delete view created', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.have.property('view_type', 'soft-delete');",
									"    ",
									"    // Store soft delete view ID",
									"    pm.environment.set('SOFT_DELETE_VIEW_ID', jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tenant_id\": \"tenant_123\",\n  \"schema_name\": \"test_schema\",\n  \"table_name\": \"{{TABLE_NAME}}\",\n  \"view_name\": \"user_soft_delete\",\n  \"view_type\": \"soft-delete\",\n  \"title\": \"Soft Deleted Users\",\n  \"description\": \"Manage soft-deleted user records\",\n  \"view_configuration\": {\n    \"show_deleted_at\": true,\n    \"allow_restore\": true,\n    \"allow_permanent_delete\": false,\n    \"bulk_operations\": true\n  },\n  \"columns\": [\n    {\n      \"column_name\": \"id\",\n      \"display_name\": \"ID\",\n      \"data_type\": \"BIGINT\",\n      \"display_order\": 1,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"show_deleted_at\": true,\n        \"allow_restore\": true,\n        \"allow_permanent_delete\": false,\n        \"bulk_operations\": true\n      }\n    },\n    {\n      \"column_name\": \"email\",\n      \"display_name\": \"Email\",\n      \"data_type\": \"VARCHAR\",\n      \"display_order\": 2,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": true,\n      \"is_sortable\": true,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"show_deleted_at\": true,\n        \"allow_restore\": true,\n        \"allow_permanent_delete\": false,\n        \"bulk_operations\": true\n      }\n    },\n    {\n      \"column_name\": \"deleted_at\",\n      \"display_name\": \"Deleted At\",\n      \"data_type\": \"TIMESTAMP\",\n      \"display_order\": 3,\n      \"is_visible\": true,\n      \"is_editable\": false,\n      \"is_required\": false,\n      \"is_searchable\": false,\n      \"is_sortable\": true,\n      \"is_password_field\": false,\n      \"validation_rules\": {},\n      \"column_options\": {\n        \"show_deleted_at\": true,\n        \"allow_restore\": true,\n        \"allow_permanent_delete\": false,\n        \"bulk_operations\": true\n      }\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/enhanced-views/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"enhanced-views",
								""
							]
						}
					}
				}
			]
		},
		{
			"name": "Admin Operations",
			"item": [
				{
					"name": "Get Pending Batches",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups/pending",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups",
								"pending"
							]
						},
						"description": "Get all batches pending admin approval"
					},
					"response": []
				},
				{
					"name": "Approve Batch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin_notes\": \"Approved for production deployment\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups/1/approve",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups",
								"1",
								"approve"
							]
						},
						"description": "Approve a batch of operations (admin only)"
					},
					"response": []
				},
				{
					"name": "Reject Batch",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"admin_notes\": \"Rejected due to potential data loss\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operation-groups/1/reject",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operation-groups",
								"1",
								"reject"
							]
						},
						"description": "Reject a batch of operations (admin only)"
					},
					"response": []
				},
				{
					"name": "Get Tenant Security Logs",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tenants/{{TENANT_ID}}/security-logs",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tenants",
								"{{TENANT_ID}}",
								"security-logs"
							]
						},
						"description": "Get security logs for a specific tenant"
					},
					"response": []
				},
				{
					"name": "Get Blocked Tenants",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tenants/blocked",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tenants",
								"blocked"
							]
						},
						"description": "Get all blocked tenants"
					},
					"response": []
				},
				{
					"name": "Unblock Tenant",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"reason\": \"Security issue resolved\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/tenants/{{TENANT_ID}}/unblock",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"tenants",
								"{{TENANT_ID}}",
								"unblock"
							]
						},
						"description": "Unblock a tenant (admin only)"
					},
					"response": []
				},
				{
					"name": "Get Operation Stats",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/operations/stats",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"operations",
								"stats"
							]
						},
						"description": "Get operation statistics (admin only)"
					},
					"response": []
				},
				{
					"name": "Get System Health",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/system/health",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"system",
								"health"
							]
						},
						"description": "Get system health status (admin only)"
					},
					"response": []
				}
			],
			"description": "Admin-only operations for batch approval and system management"
		},
		{
			"name": "Error Testing",
			"item": [
				{
					"name": "Test Missing Signature",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/capabilities",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"capabilities"
							]
						},
						"description": "Test request without X-APP-SIGNATURE header (should fail)"
					},
					"response": []
				},
				{
					"name": "Test Invalid Signature",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "invalid_signature",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/capabilities",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"capabilities"
							]
						},
						"description": "Test request with invalid signature (should fail)"
					},
					"response": []
				},
				{
					"name": "Test Raw Query with DROP",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"DROP TABLE users\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/raw-query",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"raw-query"
							]
						},
						"description": "Test prohibited DROP query (should fail with validation error)"
					},
					"response": []
				},
				{
					"name": "Test Raw Query with INSERT",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-APP-SIGNATURE",
								"value": "{{X_APP_SIGNATURE}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"INSERT INTO users (name) VALUES ('John')\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/database/raw-query",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"database",
								"raw-query"
							]
						},
						"description": "Test prohibited INSERT query (should fail with validation error)"
					},
					"response": []
				}
			],
			"description": "Error testing scenarios to verify validation and security"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"// This runs before every request in the collection",
					"",
					"// Set timestamp for idempotency keys",
					"pm.globals.set('timestamp', Date.now());",
					"",
					"// Log request details",
					"console.log('Making request to:', pm.request.url.toString());",
					"console.log('Method:', pm.request.method);",
					"console.log('Headers:', pm.request.headers);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"// This runs after every request in the collection",
					"",
					"// Log response details",
					"console.log('Response Status:', pm.response.status);",
					"console.log('Response Time:', pm.response.responseTime + 'ms');",
					"",
					"// Basic response validation",
					"pm.test('Response status is not 500', function () {",
					"    pm.expect(pm.response.code).to.not.equal(500);",
					"});",
					"",
					"// Check for JSON response",
					"if (pm.response.headers.get('Content-Type') && pm.response.headers.get('Content-Type').includes('application/json')) {",
					"    pm.test('Response is valid JSON', function () {",
					"        pm.response.to.be.json;",
					"    });",
					"    ",
					"    // Check for standard response format",
					"    pm.test('Response has standard format', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('status');",
					"        pm.expect(jsonData).to.have.property('message');",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "BASE_URL",
			"value": "http://127.0.0.1:8000",
			"type": "string"
		},
		{
			"key": "X_APP_SIGNATURE",
			"value": "your_signature_here",
			"type": "string"
		},
		{
			"key": "TENANT_ID",
			"value": "tenant_123",
			"description": "Tenant ID is now extracted from verified signature - this variable is kept for reference only",
			"type": "string"
		},
		{
			"key": "SCHEMA_NAME",
			"value": "test_schema",
			"description": "Schema name is now extracted from verified signature - this variable is kept for reference only",
			"type": "string"
		},
		{
			"key": "TABLE_NAME",
			"value": "users",
			"type": "string"
		},
		{
			"key": "VIEW_ID",
			"value": "",
			"description": "View ID will be set automatically when creating a view definition",
			"type": "string"
		},
		{
			"key": "ENHANCED_VIEW_ID",
			"value": "",
			"description": "Enhanced view ID will be set automatically when creating an enhanced view definition",
			"type": "string"
		},
		{
			"key": "ANALYTICS_VIEW_ID",
			"value": "",
			"description": "Analytics view ID will be set automatically when creating an analytics view",
			"type": "string"
		},
		{
			"key": "SOFT_DELETE_VIEW_ID",
			"value": "",
			"description": "Soft delete view ID will be set automatically when creating a soft delete view",
			"type": "string"
		}
	]
}
